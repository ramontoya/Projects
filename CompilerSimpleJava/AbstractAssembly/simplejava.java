/* simplejava.java */
/* Generated By:JavaCC: Do not edit this line. simplejava.java */
public class simplejava implements simplejavaConstants {

  static final public ASTProgram prog() throws ParseException {ASTClass c; ASTClasses cs; ASTFunctionDefinition f; ASTFunctionDefinitions fs;
cs = new ASTClasses(); fs = new ASTFunctionDefinitions();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = classDefs();
cs.addElement(c);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      f = funcDecs();
fs.addElement(f);
    }
{if ("" != null) return new ASTProgram(cs, fs, 1);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTInstanceVariableDef varDefs() throws ParseException {Token type; Token name; int dim = 0;
    type = jj_consume_token(ID);
    name = jj_consume_token(ID);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRCK:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(LBRCK);
      jj_consume_token(RBRCK);
dim++;
    }
    jj_consume_token(SCOLON);
{if ("" != null) return new ASTInstanceVariableDef(type.image, name.image, dim, type.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTClass classDefs() throws ParseException {Token name; ASTInstanceVariableDef v; ASTInstanceVariableDefs vs;
vs = new ASTInstanceVariableDefs();
    jj_consume_token(CLASS);
    name = jj_consume_token(ID);
    jj_consume_token(LBRC);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      v = varDefs();
vs.addElement(v);
    }
    jj_consume_token(RBRC);
{if ("" != null) return new ASTClass(name.image, vs, name.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormals formal(ASTFormals formals) throws ParseException {Token t; Token t2; int dim = 0; ASTFormal formal;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
      t2 = jj_consume_token(ID);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRCK:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(LBRCK);
        jj_consume_token(RBRCK);
dim++;
      }
formal = new ASTFormal(t.image, t2.image, dim, t.beginLine); formals.addElement(formal); dim = 0;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ID);
        t2 = jj_consume_token(ID);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRCK:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_7;
          }
          jj_consume_token(LBRCK);
          jj_consume_token(RBRCK);
dim++;
        }
formal = new ASTFormal(t.image, t2.image, dim, t.beginLine); formals.addElement(formal); dim = 0;
      }
{if ("" != null) return formals;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;

{if ("" != null) return formals;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionDefinition funcDecs() throws ParseException {Token type; Token name; ASTFormals formals; ASTStatement s; ASTStatements ss;
formals = new ASTFormals();
    type = jj_consume_token(ID);
    name = jj_consume_token(ID);
    jj_consume_token(LP);
    formals = formal(formals);
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SCOLON:{
      jj_consume_token(SCOLON);
{if ("" != null) return new ASTPrototype(type.image, name.image, formals, type.beginLine);}
      break;
      }
    case LBRC:{
ss = new ASTStatements();
      jj_consume_token(LBRC);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRC:
        case IF:
        case RETURN_:
        case FOR:
        case WHILE:
        case DO:
        case PRINT:
        case PRINTLN:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_8;
        }
        s = state();
ss.addElement(s);
      }
      jj_consume_token(RBRC);
{if ("" != null) return new ASTFunction(type.image, name.image, formals, ss, type.beginLine);}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallExpression actual(ASTFunctionCallExpression func) throws ParseException {ASTExpression e = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LIT:
    case MINUS:
    case NOT:
    case LP:
    case NEW:
    case T:
    case F:
    case READ:
    case ID:{
      e = exp();
func.addElement(e);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        e = exp();
func.addElement(e);
      }
{if ("" != null) return func;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;

{if ("" != null) return func;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression varsAndFuncs(Token tok) throws ParseException {Token var; ASTExpression e = null; ASTVariable build; ASTFunctionCallExpression func;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      var = jj_consume_token(ID);
build = new ASTClassVariable(new ASTBaseVariable(tok.image, tok.beginLine), var.image, var.beginLine);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:
        case LBRCK:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          var = jj_consume_token(ID);
build = new ASTClassVariable(build, var.image, var.beginLine);
          break;
          }
        case LBRCK:{
          jj_consume_token(LBRCK);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT_LIT:
          case MINUS:
          case NOT:
          case LP:
          case NEW:
          case T:
          case F:
          case READ:
          case ID:{
            e = exp();
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jj_consume_token(RBRCK);
build = new ASTArrayVariable(build, e, tok.beginLine);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return new ASTVariableExpression(build, var.beginLine);}
      break;
      }
    case LBRCK:{
      jj_consume_token(LBRCK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_LIT:
      case MINUS:
      case NOT:
      case LP:
      case NEW:
      case T:
      case F:
      case READ:
      case ID:{
        e = exp();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RBRCK);
build = new ASTArrayVariable(new ASTBaseVariable(tok.image, tok.beginLine), e, tok.beginLine);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:
        case LBRCK:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRCK:{
          jj_consume_token(LBRCK);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT_LIT:
          case MINUS:
          case NOT:
          case LP:
          case NEW:
          case T:
          case F:
          case READ:
          case ID:{
            e = exp();
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            ;
          }
          jj_consume_token(RBRCK);
build = new ASTArrayVariable(build, e, tok.beginLine);
          break;
          }
        case DOT:{
          jj_consume_token(DOT);
          var = jj_consume_token(ID);
build = new ASTClassVariable(build, var.image, var.beginLine);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return new ASTVariableExpression(build, tok.beginLine);}
      break;
      }
    case LP:{
      jj_consume_token(LP);
func = new ASTFunctionCallExpression(tok.image, tok.beginLine);
      func = actual(func);
      jj_consume_token(RP);
{if ("" != null) return func;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;

{if ("" != null) return new ASTVariableExpression(new ASTBaseVariable(tok.image, tok.beginLine), tok.beginLine);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression exp() throws ParseException {ASTExpression e;
    e = disjunct();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression disjunct() throws ParseException {ASTExpression result; Token t; ASTExpression rhs;
    result = conjunct();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_12;
      }
      t = jj_consume_token(OR);
      rhs = conjunct();
result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression conjunct() throws ParseException {ASTExpression result; Token t; ASTExpression rhs;
    result = negate();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      t = jj_consume_token(AND);
      rhs = negate();
result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression negate() throws ParseException {ASTExpression result; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      t = jj_consume_token(NOT);
      result = negate();
{if ("" != null) return new ASTUnaryOperatorExpression(result, t.image, t.beginLine);}
      break;
      }
    case INT_LIT:
    case MINUS:
    case LP:
    case NEW:
    case T:
    case F:
    case READ:
    case ID:{
      result = compare();
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression compare() throws ParseException {ASTExpression result; Token t; ASTExpression rhs;
    result = addSub();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:
      case NEQ:
      case LEQ:
      case GEQ:
      case LESS:
      case GREAT:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        t = jj_consume_token(EQUAL);
        break;
        }
      case NEQ:{
        t = jj_consume_token(NEQ);
        break;
        }
      case LESS:{
        t = jj_consume_token(LESS);
        break;
        }
      case LEQ:{
        t = jj_consume_token(LEQ);
        break;
        }
      case GREAT:{
        t = jj_consume_token(GREAT);
        break;
        }
      case GEQ:{
        t = jj_consume_token(GEQ);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = addSub();
result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression addSub() throws ParseException {ASTExpression result; Token t; ASTExpression rhs;
    result = multDiv();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = multDiv();
result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression multDiv() throws ParseException {ASTExpression result; Token t; ASTExpression rhs;
    result = negative();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case DIVIDE:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        t = jj_consume_token(TIMES);
        break;
        }
      case DIVIDE:{
        t = jj_consume_token(DIVIDE);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = negative();
result = new ASTOperatorExpression(result, rhs, t.image, t.beginLine);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression negative() throws ParseException {ASTExpression result; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      t = jj_consume_token(MINUS);
      result = negative();
{if ("" != null) return new ASTOperatorExpression(new ASTIntegerLiteral(0, t.beginLine), result, t.image, t.beginLine);}
      break;
      }
    case INT_LIT:
    case LP:
    case NEW:
    case T:
    case F:
    case READ:
    case ID:{
      result = level1();
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression level1() throws ParseException {Token t; ASTExpression e; int dim = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LIT:{
      t = jj_consume_token(INT_LIT);
{if ("" != null) return new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine);}
      break;
      }
    case T:{
      t = jj_consume_token(T);
{if ("" != null) return new ASTBooleanLiteral(true, t.beginLine);}
      break;
      }
    case F:{
      t = jj_consume_token(F);
{if ("" != null) return new ASTBooleanLiteral(false, t.beginLine);}
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LP:{
        jj_consume_token(LP);
        jj_consume_token(RP);
{if ("" != null) return new ASTNewClassExpression(t.image, t.beginLine);}
        break;
        }
      case LBRCK:{
        jj_consume_token(LBRCK);
        e = exp();
        jj_consume_token(RBRCK);
dim++;
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRCK:{
            ;
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            break label_17;
          }
          jj_consume_token(LBRCK);
          jj_consume_token(RBRCK);
dim++;
        }
{if ("" != null) return new ASTNewArrayExpression(t.image, e, dim, t.beginLine);}
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case LP:{
      jj_consume_token(LP);
      e = exp();
      jj_consume_token(RP);
{if ("" != null) return e;}
      break;
      }
    case READ:{
      t = jj_consume_token(READ);
      jj_consume_token(LP);
      jj_consume_token(RP);
{if ("" != null) return new ASTFunctionCallExpression(t.image, t.beginLine);}
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
      e = varsAndFuncs(t);
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement state() throws ParseException {ASTStatements ss; ASTStatement s; ASTVariable var; ASTExpression e = null; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRC:{
      jj_consume_token(LBRC);
ss = new ASTStatements();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRC:
        case IF:
        case RETURN_:
        case FOR:
        case WHILE:
        case DO:
        case PRINT:
        case PRINTLN:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_18;
        }
        s = state();
ss.addElement(s);
      }
      jj_consume_token(RBRC);
{if ("" != null) return ss;}
      break;
      }
    case IF:{
      s = ifState();
{if ("" != null) return s;}
      break;
      }
    case WHILE:{
      s = whileLoop();
{if ("" != null) return s;}
      break;
      }
    case DO:{
      s = doState();
{if ("" != null) return s;}
      break;
      }
    case FOR:{
      s = forLoop();
{if ("" != null) return s;}
      break;
      }
    case RETURN_:{
      t = jj_consume_token(RETURN_);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_LIT:
      case MINUS:
      case NOT:
      case LP:
      case NEW:
      case T:
      case F:
      case READ:
      case ID:{
        e = exp();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(SCOLON);
{if ("" != null) return new ASTReturnStatement(e, t.beginLine);}
      break;
      }
    case PRINT:{
      t = jj_consume_token(PRINT);
      jj_consume_token(LP);
      e = exp();
      jj_consume_token(RP);
      jj_consume_token(SCOLON);
{if ("" != null) return new ASTFunctionCallStatement(t.image, e, t.beginLine);}
      break;
      }
    case PRINTLN:{
      t = jj_consume_token(PRINTLN);
      jj_consume_token(LP);
      jj_consume_token(RP);
      jj_consume_token(SCOLON);
{if ("" != null) return new ASTFunctionCallStatement(t.image, t.beginLine);}
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        s = varDefState(t);
        break;
        }
      case PLUS:
      case MINUS:
      case DOT:
      case GETS:
      case LP:
      case LBRCK:{
        var = otherState(t);
        s = otherHelper(var, t);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement varDefState(Token t) throws ParseException {Token tok; ASTExpression e; int dim = 0; ASTVariableDefStatement s;
    tok = jj_consume_token(ID);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRCK:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_19;
      }
      jj_consume_token(LBRCK);
      jj_consume_token(RBRCK);
dim++;
    }
s = new ASTVariableDefStatement(t.image, tok.image, dim, t.beginLine);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GETS:{
      jj_consume_token(GETS);
      e = exp();
      jj_consume_token(SCOLON);
s.setinit(e);
      break;
      }
    case SCOLON:{
      jj_consume_token(SCOLON);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariable otherState(Token t) throws ParseException {Token tok; ASTExpression e = null; ASTVariable var = new ASTBaseVariable(t.image, t.beginLine);
var = new ASTBaseVariable(t.image, t.beginLine);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:
      case LBRCK:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        tok = jj_consume_token(ID);
var = new ASTClassVariable(var, tok.image, t.beginLine);
        break;
        }
      case LBRCK:{
        jj_consume_token(LBRCK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT_LIT:
        case MINUS:
        case NOT:
        case LP:
        case NEW:
        case T:
        case F:
        case READ:
        case ID:{
          e = exp();
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(RBRCK);
var = new ASTArrayVariable(var, e, t.beginLine);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement otherHelper(ASTVariable var, Token tok) throws ParseException {Token t; ASTExpression e; ASTExpression e2; ASTFunctionCallStatement func; ASTVariableExpression varExp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SCOLON);
varExp = new ASTVariableExpression(var, tok.beginLine);
e2 = new ASTOperatorExpression(varExp, new ASTIntegerLiteral(1, tok.beginLine), t.image, t.beginLine);
{if ("" != null) return new ASTAssignmentStatement(var, e2, tok.beginLine);}
      break;
      }
    case GETS:{
      t = jj_consume_token(GETS);
      e = exp();
      jj_consume_token(SCOLON);
{if ("" != null) return new ASTAssignmentStatement(var, e, t.beginLine);}
      break;
      }
    case LP:{
      jj_consume_token(LP);
func = new ASTFunctionCallStatement(tok.image, tok.beginLine);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_LIT:
      case MINUS:
      case NOT:
      case LP:
      case NEW:
      case T:
      case F:
      case READ:
      case ID:{
        e = exp();
func.addElement(e);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[43] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          e = exp();
func.addElement(e);
        }
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      jj_consume_token(SCOLON);
{if ("" != null) return func;}
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement ifState() throws ParseException {Token t; ASTExpression e; ASTStatement then; ASTStatement optional = null;
    t = jj_consume_token(IF);
    jj_consume_token(LP);
    e = exp();
    jj_consume_token(RP);
    then = state();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      optional = state();
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
{if ("" != null) return new ASTIfStatement(e, then, optional, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement whileLoop() throws ParseException {Token t; ASTExpression e; ASTStatement test;
    t = jj_consume_token(WHILE);
    jj_consume_token(LP);
    e = exp();
    jj_consume_token(RP);
    test = state();
{if ("" != null) return new ASTWhileStatement(e, test, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement doState() throws ParseException {Token t; ASTExpression e; ASTStatement body;
    t = jj_consume_token(DO);
    body = state();
    jj_consume_token(WHILE);
    jj_consume_token(LP);
    e = exp();
    jj_consume_token(RP);
    jj_consume_token(SCOLON);
{if ("" != null) return new ASTDoWhileStatement(e, body, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement forLoop() throws ParseException {Token t; Token t2; ASTStatement init; ASTExpression test; ASTStatement incr; ASTStatement body;
    t = jj_consume_token(FOR);
    jj_consume_token(LP);
    init = flHelper();
    test = exp();
    jj_consume_token(SCOLON);
    incr = flHelper();
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRC:
    case IF:
    case RETURN_:
    case FOR:
    case WHILE:
    case DO:
    case PRINT:
    case PRINTLN:
    case ID:{
      body = state();
      break;
      }
    case SCOLON:{
      t2 = jj_consume_token(SCOLON);
body = new ASTEmptyStatement(t2.beginLine);
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new ASTForStatement(init, test, incr, body, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement flHelper() throws ParseException {Token t; Token op; ASTStatement build;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
      build = flHelper2(t);
{if ("" != null) return build;}
      break;
      }
    case SCOLON:{
      op = jj_consume_token(SCOLON);
{if ("" != null) return new ASTEmptyStatement(op.beginLine);}
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement flHelper2(Token t) throws ParseException {Token op; ASTExpression e; ASTExpression e2; ASTVariableExpression varExp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GETS:{
      jj_consume_token(GETS);
      e = exp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SCOLON:{
        jj_consume_token(SCOLON);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
{if ("" != null) return new ASTAssignmentStatement(new ASTBaseVariable(t.image, t.beginLine), e, t.beginLine);}
      break;
      }
    case PLUS:{
      op = jj_consume_token(PLUS);
      jj_consume_token(PLUS);
varExp = new ASTVariableExpression(new ASTBaseVariable(t.image, t.beginLine), t.beginLine);
e2 = new ASTOperatorExpression(varExp, new ASTIntegerLiteral(1, t.beginLine), op.image, t.beginLine);
{if ("" != null) return new ASTAssignmentStatement(new ASTBaseVariable(t.image, t.beginLine), e2, t.beginLine);}
      break;
      }
    case MINUS:{
      op = jj_consume_token(MINUS);
      jj_consume_token(MINUS);
varExp = new ASTVariableExpression(new ASTBaseVariable(t.image, t.beginLine), t.beginLine);
e2 = new ASTOperatorExpression(new ASTIntegerLiteral(1, t.beginLine), varExp, op.image, t.beginLine);
{if ("" != null) return new ASTAssignmentStatement(new ASTBaseVariable(t.image, t.beginLine), e2, t.beginLine);}
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public simplejavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20000000,0x0,0x20000000,0x400,0x20000000,0x0,0x80000000,0x80008000,0x400,0x2011200,0x20004000,0x2011200,0x20004000,0x2011200,0x20004000,0x2011200,0x20004000,0x22004000,0x100000,0x80000,0x2011200,0x19e00000,0x19e00000,0x1800,0x1800,0x22000,0x22000,0x2001200,0x20000000,0x22000000,0x2000200,0x80000000,0x2011200,0x22045800,0x80000000,0x20000000,0x48000,0x20004000,0x2011200,0x20004000,0x1800,0x400,0x2011200,0x2041800,0x0,0x80008000,0x8000,0x8000,0x41800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100,0x4000,0x0,0x4000,0x0,0x0,0x0,0x4000,0x58e6,0x0,0x0,0x6608,0x0,0x6608,0x0,0x6608,0x0,0x6608,0x0,0x0,0x0,0x0,0x6608,0x0,0x0,0x0,0x0,0x0,0x0,0x6608,0x0,0x0,0x6608,0x58e6,0x6608,0x4000,0x58e6,0x0,0x0,0x0,0x6608,0x0,0x0,0x0,0x6608,0x0,0x10,0x58e6,0x4000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public simplejava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public simplejava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public simplejava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public simplejava(simplejavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(simplejavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
