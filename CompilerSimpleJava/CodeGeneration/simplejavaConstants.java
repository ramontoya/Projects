/* Generated By:JavaCC: Do not edit this line. simplejavaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface simplejavaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INT_LIT = 9;
  /** RegularExpression Id. */
  int COMMA = 10;
  /** RegularExpression Id. */
  int PLUS = 11;
  /** RegularExpression Id. */
  int MINUS = 12;
  /** RegularExpression Id. */
  int TIMES = 13;
  /** RegularExpression Id. */
  int DOT = 14;
  /** RegularExpression Id. */
  int SCOLON = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int DIVIDE = 17;
  /** RegularExpression Id. */
  int GETS = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int EQUAL = 21;
  /** RegularExpression Id. */
  int NEQ = 22;
  /** RegularExpression Id. */
  int LEQ = 23;
  /** RegularExpression Id. */
  int GEQ = 24;
  /** RegularExpression Id. */
  int LP = 25;
  /** RegularExpression Id. */
  int RP = 26;
  /** RegularExpression Id. */
  int LESS = 27;
  /** RegularExpression Id. */
  int GREAT = 28;
  /** RegularExpression Id. */
  int LBRCK = 29;
  /** RegularExpression Id. */
  int RBRCK = 30;
  /** RegularExpression Id. */
  int LBRC = 31;
  /** RegularExpression Id. */
  int RBRC = 32;
  /** RegularExpression Id. */
  int IF = 33;
  /** RegularExpression Id. */
  int RETURN_ = 34;
  /** RegularExpression Id. */
  int NEW = 35;
  /** RegularExpression Id. */
  int ELSE = 36;
  /** RegularExpression Id. */
  int FOR = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int DO = 39;
  /** RegularExpression Id. */
  int CLASS = 40;
  /** RegularExpression Id. */
  int T = 41;
  /** RegularExpression Id. */
  int F = 42;
  /** RegularExpression Id. */
  int PRINT = 43;
  /** RegularExpression Id. */
  int PRINTLN = 44;
  /** RegularExpression Id. */
  int READ = 45;
  /** RegularExpression Id. */
  int ID = 46;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "<token of kind 4>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "<INT_LIT>",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\".\"",
    "\";\"",
    "\"!\"",
    "\"/\"",
    "\"=\"",
    "\"&&\"",
    "\"||\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"(\"",
    "\")\"",
    "\"<\"",
    "\">\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"if\"",
    "\"return\"",
    "\"new\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"class\"",
    "\"true\"",
    "\"false\"",
    "\"print\"",
    "\"println\"",
    "\"read\"",
    "<ID>",
  };

}
